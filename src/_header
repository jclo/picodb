// ESLint declarations
/* global define */
/* eslint strict: ["error", "function"], one-var: 0, no-underscore-dangle: 0, curly: 0
  max-len: 0*/
/* eslint-disable no-param-reassign */
(function(root, factory) {
  'use strict';

  /* istanbul ignore next */
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([''], factory);
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(root);
  } else {
    // Browser globals.
    root.PicoDB = factory(root);
  }
}({{lib:parent}}, function(root) {
  'use strict';

  var PicoDB
    , previousPicoDB
    , _
    , _event
    , _geo
    , _project
    , _query
    , _count
    , _delete
    , _find
    , _insert
    , _update
    , _init
    ;

  // Saves the previous value of the PicoDB variable, so that it can be
  // restored later on, if noConflict is used.
  previousPicoDB = root.PicoDB;

  // Initializes PicoDB:
  /* istanbul ignore next */
  PicoDB = {};

  // Runs PicoDB in noConflict mode, returning the PicoDB variable to its
  // previous owner. Returns a reference to this PicoDB object.
  /* istanbul ignore next */
  PicoDB.noConflict = function() {
    root.PicoDB = previousPicoDB;
    return this;
  };

  // Current version of the library:
  PicoDB.VERSION = '{{lib:version}}';
  /* eslint-enable no-param-reassign */
